# Test script to compare the output of PyMuPDF (fitz) and PDFPlumber
# To switch between PDFPlumber and PyMuPDF, uncomment EITHER ll. 25-28 and 36 OR ll. 29-33 and 37.
# DISCLAIMER: This script was generated by ChatGPT and is not used for actual functionality but only package comparison.

import os
import pdfplumber
import fitz
from reportlab.lib.pagesizes import landscape, letter
from reportlab.pdfgen import canvas
import tempfile


def create_side_by_side_pdf(folder_path, output_pdf_path):
    # Initialize canvas for the final PDF output in landscape orientation
    c = canvas.Canvas(output_pdf_path, pagesize=landscape(letter))
    width, height = landscape(letter)

    # Loop through each PDF file in the specified folder
    for filename in os.listdir(folder_path):
        if filename.endswith(".pdf"):
            pdf_path = os.path.join(folder_path, filename)
            print(f"Processing {filename}")

            # Open the PDF and extract the first page's text and image
            # with pdfplumber.open(pdf_path) as pdf:
            #     if len(pdf.pages) > 0:
            #         first_page = pdf.pages[0]
            #         page_text = first_page.extract_text() or "[No text extracted]"
            with fitz.open(pdf_path) as pdf:
                if filename.endswith(".pdf"):
                    first_page = pdf.load_page(0)
                    # Extract text from the first page
                    page_text = first_page.get_text("text") or "[No text extracted]"

                    # Render the first page as an image on the left half
                    # first_page.to_image(resolution=100)
                    page_image = first_page.get_pixmap(dpi=100)
                    # Create a temporary file for the image (unique for each page)
                    with tempfile.NamedTemporaryFile(delete=False, suffix='.png') as temp_img:
                        img_path = temp_img.name
                        page_image.save(img_path)

                    # Draw the image on the left half of the page (fit to half width)
                    image_width = width / 2 - 20
                    image_height = height - 40
                    c.drawImage(img_path, 20, 20, width=image_width, height=image_height, preserveAspectRatio=True)

                    # Draw the extracted text on the right half of the page
                    text_x_position = width / 2 + 20
                    text_y_position = height - 40
                    for line in page_text.splitlines():
                        if text_y_position < 40:  # Avoid overflowing the page
                            break
                        c.drawString(text_x_position, text_y_position, line[:80])  # Truncate long lines
                        text_y_position -= 12

                    # Add a new page for the next PDF
                    c.showPage()

    # Save the final side-by-side PDF output
    c.save()
    print("Side-by-side PDF generated:", output_pdf_path)


# Specify the folder containing PDFs and the output PDF file name
folder_path = "arxiv_pdfs"
output_pdf_path = "parse-report.pdf"
create_side_by_side_pdf(folder_path, output_pdf_path)
